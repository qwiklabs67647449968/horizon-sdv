# Copyright (c) 2024-2025 Accenture, All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: jenkins
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "6"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: horizon-sdv
  source:
    chart: jenkins
    repoURL: https://charts.jenkins.io
    targetRevision: 5.8.2
    helm:
      values: |
        persistence:
          accessMode: "ReadWriteOnce"
          enabled: true
          existingClaim: "jenkins-home-volume"
        rbac:
          readSecrets: true
        agent:
          containerCap: 20
        controller:
          sidecars:
            configAutoReload:
              enabled: false
          jenkinsUriPrefix: /jenkins
          admin:
            createSecret: true
            existingSecret: jenkins-initial-creds
            userkey: jenkins-admin-user
            passwordkey: jenkins-admin-password
          jenkinsUrl: https://{{ .Values.config.domain }}/jenkins
          installPlugins:
            - antisamy-markup-formatter:173.v680e3a_b_69ff3
            - apache-httpcomponents-client-4-api:4.5.14-269.vfa_2321039a_83
            - asm-api:9.7.1-97.v4cc844130d97
            - authentication-tokens:1.131.v7199556c3004
            - bootstrap5-api:5.3.3-2
            - bouncycastle-api:2.30.1.80-256.vf98926042a_9b_
            - branch-api:2.1214.v3f652804588d
            - caffeine-api:3.2.0-161.v691ef352cee1
            - checks-api:367.v18b_7f530e54a_
            - cloudbees-folder:6.982.vf165a_16c9507
            - commons-lang3-api:3.17.0-84.vb_b_938040b_078
            - commons-text-api:1.13.0-153.v91dcd89e2a_22
            - command-launcher:115.vd8b_301cc15d0
            - configuration-as-code:1932.v75cb_b_f1b_698d
            - credentials-binding:687.v619cb_15e923f
            - credentials:1408.va_622a_b_f5b_1b_1
            - display-url-api:2.209.v582ed814ff2f
            - durable-task:587.v84b_877235b_45
            - echarts-api:5.6.0-2
            - eddsa-api:0.3.0-13.v7cb_69ed68f00
            - font-awesome-api:6.7.2-1
            - git-client:6.1.2
            - git:5.7.0
            - github-api:1.321-478.vc9ce627ce001
            - github:1.42.0
            - google-oauth-plugin:1.330.vf5e86021cb_ec
            - gson-api:2.12.1-113.v347686d6729f
            - instance-identity:201.vd2a_b_5a_468a_a_6
            - ionicons-api:82.v0597178874e1
            - jackson2-api:2.17.0-389.va_5c7e45cd806
            - jakarta-activation-api:2.1.3-2
            - jakarta-mail-api:2.1.3-2
            - javax-activation-api:1.2.0-8
            - javax-mail-api:1.6.2-10
            - jaxb:2.3.9-133.vb_ec76a_73f706
            - jdk-tool:80.v8a_dee33ed6f0
            - jjwt-api:0.11.5-120.v0268cf544b_89
            - joda-time-api:2.13.1-115.va_6b_5f8efb_1d8
            - jquery3-api:3.7.1-3
            - jsch:0.2.16-95.v3eecb_55fa_b_78
            - json-api:20250107-125.v28b_a_ffa_eb_f01
            - json-path-api:2.9.0-148.v22a_7ffe323ce
            - junit:1317.v5b_35d792b_06a_
            - kubernetes-client-api:6.10.0-240.v57880ce8b_0b_2
            - kubernetes-credentials-provider:1.273.v15e69b_55ea_8e
            - mailer:489.vd4b_25144138f
            - matrix-project:845.vffd7fa_f27555
            - metrics:4.2.21-464.vc9fa_a_0d6265d
            - mina-sshd-api-common:2.14.0-143.v2b_362fc39576
            - mina-sshd-api-core:2.14.0-143.v2b_362fc39576
            - oauth-credentials:0.653.v14cf2088e950
            - okhttp-api:4.11.0-183.va_87fc7a_89810
            - pipeline-build-step:557.v95d96f77b_2b_8
            - pipeline-graph-analysis:231.v56354571a_da_0
            - pipeline-groovy-lib:752.vdddedf804e72
            - pipeline-input-step:515.v8857b_eb_b_910c
            - pipeline-milestone-step:127.vb_52887ca_3b_6d
            - pipeline-model-api:2.2234.v4a_b_13b_8cd590
            - pipeline-model-definition:2.2234.v4a_b_13b_8cd590
            - pipeline-model-extensions:2.2234.v4a_b_13b_8cd590
            - pipeline-rest-api:2.37
            - pipeline-stage-step:322.vecffa_99f371c
            - pipeline-stage-tags-metadata:2.2234.v4a_b_13b_8cd590
            - plain-credentials:183.va_de8f1dd5a_2b_
            - plugin-util-api:6.0.0
            - prism-api:1.29.0-19
            - scm-api:704.v3ce5c542825a_
            - script-security:1373.vb_b_4a_a_c26fa_00
            - snakeyaml-api:2.3-123.v13484c65210a_
            - ssh-credentials:349.vb_8b_6b_9709f5b_
            - sshd:3.330.vc866a_8389b_58
            - structs:343.vdcf37b_a_c81d5
            - token-macro:444.v52de7e9c573d
            - trilead-api:2.192.vc50a_d147e369
            - variant:70.va_d9f17f859e0
            - workflow-aggregator:600.vb_57cdd26fdd7
            - workflow-api:1363.v03f731255494
            - workflow-basic-steps:1079.vce64b_a_929c5a_
            - workflow-cps:4032.vf3248d9c3fee
            - workflow-durable-task-step:1405.v1fcd4a_d00096
            - workflow-job:1505.vea_4b_20a_4a_495
            - workflow-multibranch:803.v08103b_87c280
            - workflow-scm-step:437.v05a_f66b_e5ef8
            - workflow-step-api:700.v6e45cb_a_5a_a_21
            - workflow-support:961.v51869f7b_d409
          additionalPlugins:
            - build-blocker-plugin:166.vc82fc20b_a_ed6
            - build-user-vars-plugin:195.v8c35f9d5c3dc
            - configuration-as-code-groovy:1.1
            - gerrit-code-review:0.4.9
            - gerrit-trigger:2.42.0
            - github-branch-source:1810.v913311241fa_9
            - google-compute-engine:4.683.v0ce26579a_ee7
            - google-kubernetes-engine:0.430.v4cc1fa_1847a_9
            - job-dsl:1.91
            - keycloak:2.3.2
            - kubernetes:4314.v5b_846cf499eb_
            - kubernetes-credentials:190.v03c305394deb_
            - pipeline-stage-view:2.37
            - ssh-slaves:3.1031.v72c6b_883b_869
            - startup-trigger-plugin:2.9.4
            - timestamper:1.28
          additionalExistingSecrets:
            - name: jenkins-keycloak
              keyName: keycloakJson
            - name: jenkins-gerrit-ssh-private-key
              keyName: privateKey
            - name: jenkins-gce-creds
              keyName: gce-creds-json
            - name: jenkins-gerrit-http-password
              keyName: password
          javaOpts: "-Dcom.cloudbees.workflow.rest.external.JobExt.maxRunsPerJob=50"
          enableRawHtmlMarkupFormatter: true
          markupFormatter: rawHtml
          JCasC:
            enabled: true
            securityRealm: |-
              keycloak:
                keycloakJson: ${jenkins-keycloak-keycloakJson}
                keycloakRespectAccessTokenTimeout: false
                keycloakValidate: false
            authorizationStrategy: |-
              loggedInUsersCanDoAnything:
                allowAnonymousRead: false
            defaultConfig: true
            configScripts:
              welcome-message: |
                credentials:
                  system:
                    domainCredentials:
                      - credentials:
                        - googleRobotPrivateKey:
                            description: "GCE Creds"
                            id: "gce-creds"
                            scope: GLOBAL
                            projectId: {{ .Values.config.projectID }}
                            serviceAccountConfig:
                              json:
                                filename: {{ .Values.config.projectID }}.json"
                                secretJsonKey: ${base64:${jenkins-gce-creds-gce-creds-json}}
                jenkins:
                  systemMessage: Welcome to Horizon SDV server.
                  clouds:
                    - computeEngine:
                        cloudName: cuttlefish-vm-main
                        configurations:
                          - bootDiskAutoDelete: true
                            bootDiskSizeGb: 10
                            bootDiskSizeGbStr: "10"
                            bootDiskType: "https://www.googleapis.com/compute/v1/projects/{{ .Values.config.projectID }}/zones/{{ .Values.config.zone }}/diskTypes/hyperdisk-balanced"
                            description: "cuttlefish-vm-main"
                            javaExecPath: "/usr/bin/java"
                            labelSet:
                              - name: "cuttlefish-vm-main"
                            labelString: "cuttlefish-vm-main"
                            labels: "cuttlefish-vm-main"
                            launchTimeoutSeconds: 300
                            launchTimeoutSecondsStr: "300"
                            mode: NORMAL
                            namePrefix: "cuttlefish-vm-main"
                            numExecutors: 1
                            numExecutorsStr: "1"
                            oneShot: true
                            region: "https://www.googleapis.com/compute/v1/projects/{{ .Values.config.projectID }}/regions/{{ .Values.config.region }}"
                            remoteFs: "/home/jenkins"
                            retentionTimeMinutes: 6
                            retentionTimeMinutesStr: "6"
                            runAsUser: "jenkins"
                            sshConfiguration:
                              customPrivateKeyCredentialsId: "jenkins-cuttlefish-vm-ssh-private-key"
                            template: "https://www.googleapis.com/compute/v1/projects/{{ .Values.config.projectID }}/global/instanceTemplates/instance-template-cuttlefish-vm-main"
                            useInternalAddress: true
                            zone: "https://www.googleapis.com/compute/v1/projects/{{ .Values.config.projectID }}/zones/{{ .Values.config.zone }}"
                        credentialsId: "gce-creds"
                        instanceCapStr: "20"
                        noDelayProvisioning: true
                        projectId: {{ .Values.config.projectID }}
                    - computeEngine:
                        cloudName: "cuttlefish-vm-v110"
                        configurations:
                        - bootDiskAutoDelete: true
                          bootDiskSizeGb: 10
                          bootDiskSizeGbStr: "10"
                          bootDiskType: "https://www.googleapis.com/compute/v1/projects/{{ .Values.config.projectID }}/zones/{{ .Values.config.zone }}/diskTypes/hyperdisk-balanced"
                          description: "cuttlefish-vm-v110"
                          javaExecPath: "/usr/bin/java"
                          labelSet:
                          - name: "cuttlefish-vm-v110"
                          labelString: "cuttlefish-vm-v110"
                          labels: "cuttlefish-vm-v110"
                          launchTimeoutSeconds: 300
                          launchTimeoutSecondsStr: "300"
                          mode: NORMAL
                          namePrefix: "cuttlefish-vm-v110"
                          numExecutors: 1
                          numExecutorsStr: "1"
                          oneShot: true
                          region: "https://www.googleapis.com/compute/v1/projects/{{ .Values.config.projectID }}/regions/{{ .Values.config.region }}"
                          remoteFs: "/home/jenkins"
                          retentionTimeMinutes: 6
                          retentionTimeMinutesStr: "6"
                          runAsUser: "jenkins"
                          sshConfiguration:
                            customPrivateKeyCredentialsId: "jenkins-cuttlefish-vm-ssh-private-key"
                          template: "https://www.googleapis.com/compute/v1/projects/{{ .Values.config.projectID }}/global/instanceTemplates/instance-template-cuttlefish-vm-v110"
                          useInternalAddress: true
                          zone: "https://www.googleapis.com/compute/v1/projects/{{ .Values.config.projectID }}/zones/{{ .Values.config.zone }}"
                        credentialsId: "gce-creds"
                        instanceCapStr: "20"
                        noDelayProvisioning: true
                        projectId: {{ .Values.config.projectID }}
                  globalNodeProperties:
                    - envVars:
                        env:
                        - key: "ANDROID_BUILD_BUCKET_ROOT_NAME"
                          value: {{ .Values.config.projectID }}-aaos
                        - key: "ANDROID_BUILD_DOCKER_ARTIFACT_PATH_NAME"
                          value: "horizon-sdv/aaos_builder"
                        - key: "CLOUD_REGION"
                          value: {{ .Values.config.region }}
                        - key: "CLOUD_ZONE"
                          value: {{ .Values.config.zone }}
                        - key: "CLOUD_PROJECT"
                          value: {{ .Values.config.projectID }}
                        - key: "GERRIT_CREDENTIALS_ID"
                          value: "jenkins-gerrit-http-password"
                        - key: "GERRIT_CUTTLEFISH_INSTANCE_TEMPLATE_LABEL"
                          value: "cuttlefish-vm-main"
                        - key: "HORIZON_DOMAIN"
                          value: {{ .Values.config.domain }}
                        - key: "JENKINS_SERVICE_ACCOUNT"
                          value: "jenkins-sa"
                        - key: "JENKINS_CACHE_STORAGE_CLASS_NAME"
                          value: "reclaimable-storage-class"
                        - key: "REPO_SYNC_JOBS"
                          value: "2"
                groovy:
                  - script: >
                      println("This is groovy !");
                jobs:
                  - script: >
                      folder('Android') {
                        displayName('Android Workflows')
                        description('<p>This folder contains pipelines and jobs related to environment administration, building, testing, and deploying Android applications.<br/>It includes workflows for administration, building and test tasks.</p>')
                      }
                  - script: >
                      folder('Android/Environment') {
                        displayName('Environment')
                        description('<p>This folder contains environment administrative jobs related to supporting Android workflows.</p>')
                      }
                  - script: >
                      folder('Android/Builds') {
                        displayName('Builds')
                        description('<p>This folder contains jobs to build Android targets.</p>')
                      }
                  - script: >
                      folder('Android/Tests') {
                        displayName('Tests')
                        description('<p>This folder contains jobs used to help test and validate Android builds.</p>')
                      }
                  - script: >
                      pipelineJob('Android/Environment/Docker Image Template') {
                         description('''
                          <br/><h3 style="margin-bottom: 10px;">Container Image Builder</h3>
                          <p>This job builds the container image that serves as a dependency for other pipeline jobs.</p>
                          <h4 style="margin-bottom: 10px;">Image Configuration</h4>
                          <p>The Dockerfile specifies the installed packages and tools required by these jobs.</p>
                          <h4 style="margin-bottom: 10px;">Pushing Changes to the Registry</h4>
                          <p>To push changes to the registry, set the parameter <code>NO_PUSH=false</code>.</p>
                          <p>The image will be pushed to {{ .Values.config.region }}-docker.pkg.dev/{{ .Values.config.projectID }}/<code>ANDROID_BUILD_DOCKER_ARTIFACT_PATH_NAME</code></p>
                          <p>Note: <cpde>ANDROID_BUILD_DOCKER_ARTIFACT_PATH_NAME</code> is defined in the system environment variables.</li></ul></p>
                          <h4 style="margin-bottom: 10px;">Verifying Changes</h4>
                          <p>When working with new Dockerfile updates, it's recommended to set <code>NO_PUSH=true</code> to verify the changes before pushing the image to the registry.</p>
                          <h4 style="margin-bottom: 10px;">Important Notes</h4>
                          <p>This job need only be run once, or when there are updates to be applied based on Dockerfile changes..</p>
                          <br/><div style="border-top: 1px solid #ccc; width: 100%;"></div><br/>''')
                        triggers {
                          hudsonStartupTrigger {
                            nodeParameterName("")
                            label("")
                            quietPeriod("0")
                            runOnChoice("ON_CONNECT")
                          }
                        }
                        logRotator {
                          daysToKeep({{ .Values.config.workloads.android.logRotation.daysToKeep }})
                          numToKeep({{ .Values.config.workloads.android.logRotation.numToKeep }})
                        }
                        definition {
                          cpsScm {
                            lightweight()
                            scm {
                              git {
                                remote {
                                  url('{{ .Values.config.workloads.android.url }}')
                                  credentials('jenkins-github-creds')
                                }
                                branch('*/{{ .Values.config.workloads.android.branch }}')
                              }
                            }
                            scriptPath('workloads/android/pipelines/environment/docker_image_template/Jenkinsfile')
                          }
                        }
                      }
                  - script: >
                      pipelineJob('Android/Environment/CF Instance Template') {
                        description('''
                          <br/><h3 style="margin-bottom: 10px;">GCE Instance Template Creation Job</h3>
                          <p>This job creates the GCE instance templates used by test pipelines to spin up cuttlefish-ready and CTS-ready cloud instances, which are then used to launch <a href="https://source.android.com/docs/devices/cuttlefish" target="_blank" title="Cuttlefish Virtual Device">CVD</a> and run <a href="https://source.android.com/docs/compatibility/cts" target="_blank" title="Compatibility Test Suite">CTS</a> tests. Refer to the README.md in the respective repository for further details.</p>
                          <h4 style="margin-bottom: 10px;">Instance Template Naming</h4>
                          <p>The name for the created instance template can either be auto-generated or user-provided (<code>CUTTLEFISH_INSTANCE_UNIQUE_NAME</code>). The resulting artifact will be <code>instance-template-&lt;name&gt;</code>. If a user-defined name is used, the Jenkins CasC (<code>jenkins.yaml</code>) must be updated with a new <code>computeEngine</code> entry for the template.</p>
                          <h4 style="margin-bottom: 10px;">Updating and Deleting Outdated Instances</h4>
                          <p>This job can also be used to update and replace existing instances or delete outdated instances and associated artifacts.</p>
                          <br/><div style="border-top: 1px solid #ccc; width: 100%;"></div><br/>''')
                        triggers {
                          hudsonStartupTrigger {
                            nodeParameterName("")
                            label("")
                            quietPeriod("0")
                            runOnChoice("ON_CONNECT")
                          }
                        }
                        logRotator {
                          daysToKeep({{ .Values.config.workloads.android.logRotation.daysToKeep }})
                          numToKeep({{ .Values.config.workloads.android.logRotation.numToKeep }})
                        }
                        definition {
                          cpsScm {
                            lightweight()
                            scm {
                              git {
                                remote {
                                  url('{{ .Values.config.workloads.android.url }}')
                                  credentials('jenkins-github-creds')
                                }
                                branch('*/{{ .Values.config.workloads.android.branch }}')
                              }
                            }
                            scriptPath('workloads/android/pipelines/environment/cf_instance_template/Jenkinsfile')
                          }
                        }
                      }
                  - script: >
                      pipelineJob('Android/Environment/Development Instance') {
                        description('''
                          <br/><h3 style="margin-bottom: 10px;">Development Build Instance Creation Job</h3>
                          <p>This job allows creation of a temporary build instance that can be used to aid development and testing of builds.<br/>
                          <h4 style="margin-bottom: 10px;">Instance Details</h4>
                          <p>Instances can be expensive and therefore there is a maximum up-time before the instance will automatically be terminated.</p>
                          <h4 style="margin-bottom: 10px;">Accessing the Instance</h4>
                          <p>Access the instance via <code>bastion</code> host and <code>kubectl</code> command line tool. Example command:</p>
                          <p><code>kubectl exec -it -n jenkins &lt;pod name&gt; -- bash</code></p>
                          <h4 style="margin-bottom: 10px;">Important Notes</h4>
                          <p>Users are responsible for saving their own work to persistent storage before expiry.</p>
                          <br/><div style="border-top: 1px solid #ccc; width: 100%;"></div><br/>''')
                        triggers {
                          hudsonStartupTrigger {
                            nodeParameterName("")
                            label("")
                            quietPeriod("0")
                            runOnChoice("ON_CONNECT")
                          }
                        }
                        logRotator {
                          daysToKeep({{ .Values.config.workloads.android.logRotation.daysToKeep }})
                          numToKeep({{ .Values.config.workloads.android.logRotation.numToKeep }})
                        }
                        definition {
                          cpsScm {
                            lightweight()
                            scm {
                              git {
                                remote {
                                  url('{{ .Values.config.workloads.android.url }}')
                                  credentials('jenkins-github-creds')
                                }
                                branch('*/{{ .Values.config.workloads.android.branch }}')
                              }
                            }
                            scriptPath('workloads/android/pipelines/environment/dev_instance/Jenkinsfile')
                          }
                        }
                      }
                  - script: >
                      pipelineJob('Android/Environment/Delete Cuttlefish VM Instance') {
                        description('''
                          <br/><h3 style="margin-bottom: 10px;">Cuttlefish VM Cleanup Job</h3>
                          <p>This job allows developers to delete Cuttlefish VM instances that may have been left running after testing.</p>
                          <h4 style="margin-bottom: 10px;">Important Notes</h4>
                          <p>Only VM instances with the prefix <code>cuttlefish-vm</code> can be deleted, preventing accidental deletion of non-Cuttlefish instances.</p>
                          <h4 style="margin-bottom: 10px;">Viewing running instances:</h4>
                          <ul>
                            <li><a href="http://{{ .Values.config.domain }}/jenkins/manage/computer/" target="_blank">Jenkins Computer Management</a></li>
                            <li><a href="https://console.cloud.google.com/compute/instances?project={{ .Values.config.projectID }}" target="_blank">Google Cloud Compute Instances</a></li></ul>
                          <br/><div style="border-top: 1px solid #ccc; width: 100%;"></div><br/>''')
                        triggers {
                          hudsonStartupTrigger {
                            nodeParameterName("")
                            label("")
                            quietPeriod("0")
                            runOnChoice("ON_CONNECT")
                          }
                        }
                        logRotator {
                          daysToKeep({{ .Values.config.workloads.android.logRotation.daysToKeep }})
                          numToKeep({{ .Values.config.workloads.android.logRotation.numToKeep }})
                        }
                        definition {
                          cpsScm {
                            lightweight()
                            scm {
                              git {
                                remote {
                                  url('{{ .Values.config.workloads.android.url }}')
                                  credentials('jenkins-github-creds')
                                }
                                branch('*/{{ .Values.config.workloads.android.branch }}')
                              }
                            }
                            scriptPath('workloads/android/pipelines/environment/delete_cf_vm_instance/Jenkinsfile')
                          }
                        }
                      }
                  - script: >
                      pipelineJob('Android/Environment/Delete MTK Connect Testbench') {
                        description('''
                          <br/><h3 style="margin-bottom: 10px;">MTK Connect Testbench Cleanup Job</h3>
                          <p>This job allows developers to delete offline MTK Connect testbenches that may have been left running after testing.</p>
                          <h4 style="margin-bottom: 10px;">Important Notes</h4>
                          <p>The test pipelines show the name of the Testbench in console logs, e.g. <code>MTK_CONNECT_TESTBENCH=Android/Tests/CVD_Launcher-4</code></p>
                          <h4 style="margin-bottom: 10px;">Viewing Testbenches</h4> <p><a href="http://{{ .Values.config.domain }}/mtk-connect/portal/testbenches" target="_blank">MTK Connect Testbenches</a> provides details of online and offline testbenches.</p>
                          <br/><div style="border-top: 1px solid #ccc; width: 100%;"></div><br/>''')
                        triggers {
                          hudsonStartupTrigger {
                            nodeParameterName("")
                            label("")
                            quietPeriod("0")
                            runOnChoice("ON_CONNECT")
                          }
                        }
                        logRotator {
                          daysToKeep({{ .Values.config.workloads.android.logRotation.daysToKeep }})
                          numToKeep({{ .Values.config.workloads.android.logRotation.numToKeep }})
                        }
                        definition {
                          cpsScm {
                            lightweight()
                            scm {
                              git {
                                remote {
                                  url('{{ .Values.config.workloads.android.url }}')
                                  credentials('jenkins-github-creds')
                                }
                                branch('*/{{ .Values.config.workloads.android.branch }}')
                              }
                            }
                            scriptPath('workloads/android/pipelines/environment/delete_mtkc_testbench/Jenkinsfile')
                          }
                        }
                      }
                  - script: >
                      pipelineJob('Android/Builds/AAOS Builder') {
                        description('''
                          <br/><h3 style="margin-bottom: 10px;">Android Automotive Virtual Devices and Platform Targets Builder</h3>
                          <p>This job is used to build Android Automotive virtual devices and platform targets from the provided source manifest.</p>
                          <h4 style="margin-bottom: 10px;">Supported Builds</h4>
                          <ul>
                            <li><a href="https://source.android.com/docs/automotive/start/avd/android_virtual_device" target="_blank">Android Virtual Devices</a> for use with <a href="https://source.android.com/docs/automotive/start/avd/android_virtual_device#share-an-avd-image-with-android-studio-users" target="_blank">Android Studio</a></li> 
                            <li><a href="https://source.android.com/docs/devices/cuttlefish" target="_blank">Cuttlefish Virtual Devices</a> for use with <a href="https://source.android.com/docs/compatibility/cts" target="_blank">CTS</a></li>
                            <li>Reference hardware platforms such as <a href="https://github.com/raspberry-vanilla/android_local_manifest" target="_blank">RPi</a> and <a href="https://source.android.com/docs/automotive/start/pixelxl" target="_blank">Pixel Tablets</a></li>
                          </ul>
                          <h4 style="margin-bottom: 10px;">Build Outputs</h4>
                          <p>Build outputs are stored in a Google Cloud Storage bucket (refer to build artifact for location).</p>
                          <h4 style="margin-bottom: 10px;">Viewing Artifacts on Google Cloud</h4>
                          <p><a href="https://cloud.google.com/docs/authentication/gcloud" target="_blank">Sign in to Google Cloud</a> and run the following command: <br/><code>gcloud storage ls gs://{{ .Values.config.projectID }}-aaos/Android/Builds/AAOS_Builder/&lt;BUILD_NUMBER&gt;</code></p>
                          <br/><div style="border-top: 1px solid #ccc; width: 100%;"></div><br/>''')
                        triggers {
                          hudsonStartupTrigger {
                            nodeParameterName("")
                            label("")
                            quietPeriod("0")
                            runOnChoice("ON_CONNECT")
                          }
                        }
                        logRotator {
                          daysToKeep({{ .Values.config.workloads.android.logRotation.daysToKeep }})
                          numToKeep({{ .Values.config.workloads.android.logRotation.numToKeep }})
                        }
                        definition {
                          cpsScm {
                            lightweight()
                            scm {
                              git {
                                remote {
                                  url('{{ .Values.config.workloads.android.url }}')
                                  credentials('jenkins-github-creds')
                                }
                                branch('*/{{ .Values.config.workloads.android.branch }}')
                              }
                            }
                            scriptPath('workloads/android/pipelines/builds/aaos_builder/Jenkinsfile')
                          }
                        }
                      }
                  - script: >
                      pipelineJob('Android/Builds/CTS Builder') {
                        description('''
                          <br/><h3 style="margin-bottom: 10px;">Android Compatibility Test Suite Builder</h3>
                          <p>This job is used to build the Android <a href="https://source.android.com/docs/compatibility/cts" target="_blank">Compatibility Test Suite</a> (CTS) from the provided source manifest.</p>
                          <h4 style="margin-bottom: 10px;">Supported Builds</h4>
                          <p>The lunch target provided must be of the cuttlefish variety (i.e. must start with <code>aosp_cf</code>) and only the CTS package is built.</p>
                          <p>The build target can then be used in the <i>CTS Execution</i> pipeline instead of the <a href="https://source.android.com/docs/compatibility/cts/downloads" target="_blank">google-released</a> version pre-installed on the Cuttlefish instance template.</p>
                          <h4 style="margin-bottom: 10px;">Build Outputs</h4>
                          <p>Build outputs are stored in a Google Cloud Storage bucket (refer to build artifact for location).</p>
                          <p>The main output of this job is the CTS package <code>android-cts.zip</code> which contains :</p>
                          <ul>
                            <li><a href="https://source.android.com/docs/core/tests/tradefed" target="_blank">CTS Trade Federataion</a> (<code>cts-tradefed</code>), the test harness for CTS</li>
                            <li>The full suite of CTS tests (not including <a href="https://source.android.com/docs/compatibility/cts/verifier" target="_blank" title="CTS-V">CTS-V</a> tests)</li>
                          </ul>
                          <h4 style="margin-bottom: 10px;">Viewing Artifacts on Google Cloud</h4>
                          <p><a href="https://cloud.google.com/docs/authentication/gcloud" target="_blank">Sign in to Google Cloud</a> and run the following command: <br/><code>gcloud storage ls gs://{{ .Values.config.projectID }}-aaos/Android/Builds/CTS_Builder/&lt;BUILD_NUMBER&gt;</code></p>
                          <br/><div style="border-top: 1px solid #ccc; width: 100%;"></div><br/>''')
                        triggers {
                          hudsonStartupTrigger {
                            nodeParameterName("")
                            label("")
                            quietPeriod("0")
                            runOnChoice("ON_CONNECT")
                          }
                        }
                        logRotator {
                          daysToKeep({{ .Values.config.workloads.android.logRotation.daysToKeep }})
                          numToKeep({{ .Values.config.workloads.android.logRotation.numToKeep }})
                        }
                        definition {
                          cpsScm {
                            lightweight()
                            scm {
                              git {
                                remote {
                                  url('{{ .Values.config.workloads.android.url }}')
                                  credentials('jenkins-github-creds')
                                }
                                branch('*/{{ .Values.config.workloads.android.branch }}')
                              }
                            }
                            scriptPath('workloads/android/pipelines/builds/cts_builder/Jenkinsfile')
                          }
                        }
                      }
                  - script: >
                      pipelineJob('Android/Builds/Gerrit') {
                        description('''
                          <br/><h3 style="margin-bottom: 10px;">Android Gerrit Pipeline Builder</h3>
                          <p>This job is triggered by a Gerrit patchset change. Its purpose is to verify the integrity of the patchset change by performing builds on that patchset and providing the user with a vote to their patchset in <a href="https://{{ .Values.config.domain }}/gerrit/" target="_blank">Gerrit.</p>
                          <h4 style="margin-bottom: 10px;">Supported Builds</h4>
                          <p>Currently, this job supports the standard set of Android Automotive virtual devices and a platform target.</p>
                          <h4 style="margin-bottom: 10px;">Build Outputs</h4>
                          <p>Build outputs are stored in a Google Cloud Storage bucket (refer to build artifacts for location).</p>
                          <h4 style="margin-bottom: 10px;">Important Notes</h4>
                          <ul><li>This build job serves only to demonstrate the pipeline with Gerrit</li>
                          <li>It includes a single CTS test job also for demonstration purposes, but this has no impact on the vote.</li></ul>
                          <h4 style="margin-bottom: 10px;">Viewing Artifacts on Google Cloud</h4>
                          <p><a href="https://cloud.google.com/docs/authentication/gcloud" target="_blank">Sign in to Google Cloud</a> and run the following command: <br/><code>gcloud storage ls gs://{{ .Values.config.projectID }}-aaos/Android/Builds/Gerrit/&lt;BUILD_NUMBER&gt;</code></p>
                          <br/><div style="border-top: 1px solid #ccc; width: 100%;"></div><br/>''')
                        triggers {
                          hudsonStartupTrigger {
                            nodeParameterName("")
                            label("")
                            quietPeriod("0")
                            runOnChoice("ON_CONNECT")
                          }
                        }
                        logRotator {
                          artifactDaysToKeep({{ .Values.config.workloads.android.logRotation.artifactDaysToKeep }})
                          artifactNumToKeep({{ .Values.config.workloads.android.logRotation.artifactNumToKeep }})
                          daysToKeep({{ .Values.config.workloads.android.logRotation.daysToKeep }})
                          numToKeep({{ .Values.config.workloads.android.logRotation.numToKeep }})
                        }
                        definition {
                          cpsScm {
                            lightweight()
                            scm {
                              git {
                                remote {
                                  url('{{ .Values.config.workloads.android.url }}')
                                  credentials('jenkins-github-creds')
                                }
                                branch('*/{{ .Values.config.workloads.android.branch }}')
                              }
                            }
                            scriptPath('workloads/android/pipelines/builds/gerrit/Jenkinsfile')
                          }
                        }
                      }
                  - script: >
                      pipelineJob('Android/Tests/CTS Execution') {
                        description('''
                          <br/><h3 style="margin-bottom: 10px;">CTS on Cuttlefish Job</h3>
                          <p>This job allows users execute the <a href="https://source.android.com/docs/compatibility/cts" target="_blank">Compatibility Test Suite</a> (CTS) on their <a href="https://source.android.com/docs/devices/cuttlefish" target="_blank">Cuttlefish Virtual Device</a> (CVD) image builds. Refer to the README.md in the respective repository for further details.</p>
                          <h4 style="margin-bottom: 10px;">Job Overview</h4>
                          <p>The job runs on a cuttlefish-ready virtual machine instance (refer to the <i>CF Instance Template</i> job) together with running virtual devices (refer to <i>CVD Launcher</i> job). The Compatibility Test Suite is then executed across the virtual devices:
                          <ul>
                            <li><a href="https://source.android.com/docs/core/tests/tradefed" target="_blank">CTS Trade Federation</a></i> (<tt>cts-tradefed</tt>) - the test harness for CTS - can distribute / shard the tests across the multiple virtual devices </li>
                            <li>The CTS version can either use the default <a href="https://source.android.com/docs/compatibility/cts/downloads" target="_blank">google-released</a> version or a test suite built by the <i>CTS Builder</i> job</i></li>
                          </ul></p>
                          <h4 style="margin-bottom: 10px;">Mandatory Parameters</h4>
                          <ul>
                            <li><code>JENKINS_GCE_CLOUD_LABEL</code>: The label name of the cuttlefish instance to provision the virtual devices on.</li>
                            <li><code>CUTTLEFISH_DOWNLOAD_URL</code>: The URL of the user's virtual device images to install and launch.</li>
                          </ul>
                          <p>Refer to the README.md in the respective repository for further details.</p>
                          <h4 style="margin-bottom: 10px;">MTK Connect Integration</h4>
                          <p>User may choose to enable <a href="http://{{ .Values.config.domain }}/mtk-connect/portal/testbenches" target="_blank">MTK Connect</a> to allow users monitor virtual devices during testing.</p>
                          <h4 style="margin-bottom: 10px;">Test Results and Debugging</h4>
                          <p>Test results are stored with the job as artifacts.<br/>
                          <p>Users can optionally keep the cuttlefish virtual devices alive for a finite amount of time after the CTS run has completed to facilitate debugging via MTK Connect. This option is only available when MTK Connect is enabled.</p>
                          <h4 style="margin-bottom: 10px;">Important Notes</h4>
                          <p>Users are responsible for specifying a valid cuttlefish instance - the job will block if the specified instance does not exist.</p>
                          <br/><div style="border-top: 1px solid #ccc; width: 100%;"></div><br/>''')
                        logRotator {
                          artifactDaysToKeep({{ .Values.config.workloads.android.logRotation.artifactDaysToKeep }})
                          artifactNumToKeep({{ .Values.config.workloads.android.logRotation.artifactNumToKeep }})
                          daysToKeep({{ .Values.config.workloads.android.logRotation.daysToKeep }})
                          numToKeep({{ .Values.config.workloads.android.logRotation.numToKeep }})
                        }
                        definition {
                          cpsScm {
                            lightweight()
                            scm {
                              git {
                                remote {
                                  url('{{ .Values.config.workloads.android.url }}')
                                  credentials('jenkins-github-creds')
                                }
                                branch('*/{{ .Values.config.workloads.android.branch }}')
                              }
                            }
                            scriptPath('workloads/android/pipelines/tests/cts_execution/Jenkinsfile')
                          }
                        }
                      }
                  - script: >
                      pipelineJob('Android/Tests/CVD Launcher') {
                        description('''
                          <br/><h3 style="margin-bottom: 10px;">Cuttlefish Virtual Device Test Job</h3>
                          <p>This job allows the user to test <a href="https://source.android.com/docs/devices/cuttlefish" target="_blank" title="Cuttlefish Virtual Device">CVD</a> images by configuring, the following mandatory parameters:</p>
                          <h4 style="margin-bottom: 10px;">Job Overview</h4>
                          <p>Virtual devices are initialized and remain active for a specified period, allowing users to interact with them via <a href="http://{{ .Values.config.domain }}/mtk-connect/portal/testbenches" target="_blank">MTK Connect</a>.<br/>
                          The number of devices initialized is determined by the <code>NUM_INSTANCES</code> setting.<br/>
                          After the <code>CUTTLEFISH_KEEP_ALIVE_TIME</code> period expires, the devices, testbenches, and VM instance are terminated in a controlled manner.</p>
                          <h4 style="margin-bottom: 10px;">Mandatory Parameters</h4>
                          <ul>
                            <li><code>JENKINS_GCE_CLOUD_LABEL</code>: The label name of the cuttlefish instance to provision the virtual devices on.</li>
                            <li><code>CUTTLEFISH_DOWNLOAD_URL</code>: The URL of the user's virtual device images to install and launch.</li>
                          </ul>
                          <p>Refer to the README.md in the respective repository for further details.</p>
                          <h4 style="margin-bottom: 10px;">Important Notes</h4>
                          <p>Users are responsible for specifying a valid cuttlefish instance - the job will block if the specified instance does not exist.</p>
                          <br/><div style="border-top: 1px solid #ccc; width: 100%;"></div><br/>''')
                        logRotator {
                          artifactDaysToKeep({{ .Values.config.workloads.android.logRotation.artifactDaysToKeep }})
                          artifactNumToKeep({{ .Values.config.workloads.android.logRotation.artifactNumToKeep }})
                          daysToKeep({{ .Values.config.workloads.android.logRotation.daysToKeep }})
                          numToKeep({{ .Values.config.workloads.android.logRotation.numToKeep }})
                        }
                        definition {
                          cpsScm {
                            lightweight()
                            scm {
                              git {
                                remote {
                                  url('{{ .Values.config.workloads.android.url }}')
                                  credentials('jenkins-github-creds')
                                }
                                branch('*/{{ .Values.config.workloads.android.branch }}')
                              }
                            }
                            scriptPath('workloads/android/pipelines/tests/cvd_launcher/Jenkinsfile')
                          }
                        }
                      }
                unclassified:
                  buildUserVars:
                    allBuilds: true
                  gerrit-trigger:
                    servers:
                      - name: "Gerrit"
                        noConnectionOnStartup: false
                        config:
                          buildCurrentPatchesOnly:
                            abortAbandonedPatchsets: false
                            abortManualPatchsets: false
                            abortNewPatchsets: false
                            abortSameTopic: false
                            enabled: false
                          categories:
                            - verdictDescription: "Code Review"
                              verdictValue: "Code-Review"
                            - verdictDescription: "Verified"
                              verdictValue: "Verified"
                          gerritAuthKeyFile: "/run/secrets/additional/jenkins-gerrit-ssh-private-key-privateKey"
                          gerritFrontEndUrl: "https://{{ .Values.config.domain }}/gerrit/"
                          gerritHostName: "gerrit-service.gerrit.svc.cluster.local"
                          gerritUserName: "gerrit-admin"
                          useRestApi: false
                  timestamper:
                    allPipelines: true
                    systemTimeFormat: "'<b>'yyyy-MM-dd HH:mm:ss.SSS'</b> '"
                    elapsedTimeFormat: "'<b>'HH:mm:ss.S'</b> '"
  destination:
    server: https://kubernetes.default.svc
    namespace: jenkins
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
    automated: {}
