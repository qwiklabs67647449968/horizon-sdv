# Copyright (c) 2024-2025 Accenture, All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: terraform
on:
  workflow_call:
    secrets:
      fetcher-key:
        required: false
        description: "Github App Private Key (Deprecated, use gh-app-key)"
      gcp-sa-key:
        required: false
        description: Google Service Account
      wif-provider:
        required: false
        description: "Workload Identity Federation provider"
      gcp-sa:
        required: false
        description: "GCP Service account to impersonate"
      gh-app-id:
        required: false
        description: "Github App ID"
      gh-installation-id:
        required: false
        description: "Github Installation ID"
      gh-app-key:
        required: false
        description: "Github App Private Key"
      json-secrets:
        required: false
        description: "secrets"
      gh-argocd-initial-password:
        required: false
        description: "Github Secret ARGOCD_INITIAL_PASSWORD"
      gh-jenkins-initial-password:
        required: false
        description: "Github Secret JENKINS_INITIAL_PASSWORD"
      gh-keycloak-initial-password:
        required: false
        description: "Github Secret KEYCLOAK_INITIAL_PASSWORD"
      gh-gerrit-admin-initial-password:
        required: false
        description: "Github Secret GERRIT_ADMIN_INITIAL_PASSWORD"
      gh-gerrit-admin-private-key:
        required: false
        description: "Github Secret GERRIT_ADMIN_PRIVATE_KEY"
      gh-keycloak-horizon-admin-password:
        required: false
        description: "Github Secret KEYCLOAK_HORIZON_ADMIN_PASSWORD"
      gh-cuttlefish-vm-ssh-private-key:
        required: false
        description: "Github Secret CUTTLEFISH_VM_SSH_PRIVATE_KEY"

    inputs:
      branch_env:
        required: false
        description: "used branch_env"
        type: string
      prefix:
        required: false
        description: "prefix branch name"
        type: string
      gh-app-id:
        required: false
        description: "Github App ID"
        type: number
      gh-installation-id:
        required: false
        description: "Github Installation ID"
        type: number
      directory:
        required: false
        description: "Terraform directory"
        default: "terraform"
        type: string
      wif-provider:
        required: false
        description: "Workload Identity Federation provider"
        type: string
      gcp-sa:
        required: false
        description: "GCP Service account to impersonate"
        type: string
      terraform-version:
        required: false
        default: latest
        type: string
      parallelism:
        required: false
        description: "Terraform parallelism"
        default: 100
        type: number

jobs:
  get-env:
    name: Get environment
    runs-on: self-hosted
    outputs:
      environment: ${{ steps.get-env.outputs.environment }}
      action: ${{ steps.get-env.outputs.action }}
    steps:
      - name: Print environment name to output
        run: |
          echo "branch_env name is ${{ inputs.branch_env }}"
          echo "branch prefix is ${{ inputs.prefix }}"

      - name: get environment
        id: get-env
        shell: bash
        run: |
          if [[ "${{ inputs.prefix }}" == 'env' && ${{ inputs.branch_env }} != '' ]]; then
            echo "environment=${{ inputs.branch_env }}" >> $GITHUB_OUTPUT;
            temp=${{ inputs.branch_env }}
            action="${temp}-plan-apply"
            echo "action=$action" >> $GITHUB_OUTPUT;
          elif [[ "${{ inputs.prefix }}" == 'feature' && ${{ inputs.branch_env }} != '' ]]; then
            echo "environment=${{ inputs.branch_env }}" >> $GITHUB_OUTPUT;
            temp=${{ inputs.branch_env }}
            action="${temp}-plan"
            echo "action=$action" >> $GITHUB_OUTPUT;
          else
            echo "Missing proper prefix in branch name" >> $GITHUB_OUTPUT;
            action="${temp}-no-action"
            echo "action=$action" >> $GITHUB_OUTPUT;
          fi

  terraform:
    name: Terraform
    runs-on: self-hosted
    needs: get-env
    environment: ${{ needs.get-env.outputs.environment }}

    steps:
      - name: Convert key to PKCS#8 format
        id: create-pkcs8
        env:
          GH_APP_KEY: ${{ secrets.gh-app-key }}
        run: |
          echo "$GH_APP_KEY" | openssl pkcs8 -topk8 -nocrypt -outform PEM > key.pem
          PKCS8_KEY=$(<key.pem)
          while IFS= read -r each_line; do
            echo "::add-mask::$each_line"
          done <<< "$PKCS8_KEY"
          echo "TF_VAR_sdv_gh_app_key_pkcs8<<EOF" >> $GITHUB_ENV
          echo "$PKCS8_KEY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Generate encoded argocd bcrypt hash
        id: generate-encoded-argocd-bcrypt-hash
        shell: bash
        run: |
          # Install argocd cli
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd

          # Generate bcrypt hash for argocd password
          HASH=$(./argocd account bcrypt --password "${{ secrets.gh-argocd-initial-password }}")
          # Encode the hash with base64
          ENCODED_HASH=$(echo -n "$HASH" | base64 -w0)
          # Save the encoded hash as an output variable
          echo "argocd_encoded_bcrypt_hash=$ENCODED_HASH" >> $GITHUB_OUTPUT

          # Clean up the downloaded binary
          rm argocd

      - name: set environment variables
        id: set-vars
        shell: bash
        env:
          JSON_SECRETS: ${{ secrets.json-secrets }}

        run: |
          echo "TF_VAR_sdv_gh_app_id=${{ secrets.gh-app-id }}" >> $GITHUB_ENV;
          echo "TF_VAR_sdv_gh_installation_id=${{ secrets.gh-installation-id }}" >> $GITHUB_ENV;
          echo "TF_VAR_sdv_gh_app_key<<EOF" >> $GITHUB_ENV
          echo  "${{ secrets.gh-app-key }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "TF_VAR_sdv_gh_gerrit_admin_private_key<<EOF">> $GITHUB_ENV
          echo  "${{ secrets.gh-gerrit-admin-private-key }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "TF_VAR_sdv_gh_cuttlefish_vm_ssh_private_key<<EOF">> $GITHUB_ENV
          echo  "${{ secrets.gh-cuttlefish-vm-ssh-private-key }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "TF_VAR_sdv_gh_argocd_initial_password_bcrypt=${{ steps.generate-encoded-argocd-bcrypt-hash.outputs.argocd_encoded_bcrypt_hash }}" >> $GITHUB_ENV
          echo "TF_VAR_sdv_gh_jenkins_initial_password=${{ secrets.gh-jenkins-initial-password }}" >> $GITHUB_ENV
          echo "TF_VAR_sdv_gh_keycloak_initial_password=${{ secrets.gh-keycloak-initial-password }}" >> $GITHUB_ENV
          echo "TF_VAR_sdv_gh_gerrit_admin_initial_password=${{ secrets.gh-gerrit-admin-initial-password }}" >> $GITHUB_ENV
          echo "TF_VAR_sdv_gh_keycloak_horizon_admin_password=${{ secrets.gh-keycloak-horizon-admin-password }}" >> $GITHUB_ENV
          echo "TF_VAR_sdv_gcp_project_id=${{ vars.GCP_PROJECT_ID }}" >> $GITHUB_ENV;
          echo "TF_VAR_sdv_computer_sa=${{ vars.GCP_COMPUTER_SA }}" >> $GITHUB_ENV;
          echo "TF_VAR_sdv_gcp_cloud_region=${{ vars.GCP_CLOUD_REGION }}" >> $GITHUB_ENV;
          echo "TF_VAR_sdv_gcp_cloud_zone=${{ vars.GCP_CLOUD_ZONE }}" >> $GITHUB_ENV;
          echo "TF_VAR_sdv_gh_domain_name=${{ vars.HORIZON_DOMAIN }}" >> $GITHUB_ENV;

          if [[ "${{ secrets.gcp-sa }}" != '' && "${{ secrets.wif-provider }}" != '' ]]; then
            echo "GCP_SA=${{ secrets.gcp-sa }}" >> $GITHUB_ENV;
            echo "GCP_WIF=${{ secrets.wif-provider }}" >> $GITHUB_ENV;
          else
            echo "GCP_SA=${{ inputs.gcp-sa }}" >> $GITHUB_ENV;
            echo "GCP_WIF=${{ inputs.wif-provider }}" >> $GITHUB_ENV;
          fi

          echo "GCP_PROJECT_ID=${{ vars.GCP_PROJECT_ID }}" >> $GITHUB_ENV;

          if [[ "${{ secrets.gh-app-id }}" != '' && "${{ secrets.gh-installation-id }}" != '' ]]; then
            echo "GITHUB_APP_ID=${{ secrets.gh-app-id }}" >> $GITHUB_ENV;
            echo "GITHUB_APP_INSTALLATION_ID=${{ secrets.gh-installation-id }}" >> $GITHUB_ENV;
          elif [[ "${{ inputs.gh-app-id }}" != '0' && "${{ inputs.gh-installation-id }}" != '0' ]]; then
            echo "GITHUB_APP_ID=${{ inputs.gh-app-id }}" >> $GITHUB_ENV;
            echo "GITHUB_APP_INSTALLATION_ID=${{ inputs.gh-installation-id }}" >> $GITHUB_ENV;
          else
            echo "Missing Github App id and/or Github Installation ID"
            exit 1
          fi

          if [[ "${{ secrets.gh-app-key }}" != '' ]]; then
            echo "GITHUB_APP_PEM_FILE<<EOF" >> $GITHUB_ENV
            echo  "${{ secrets.gh-app-key }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          elif [[ "${{ secrets.fetcher-key }}" != '' ]]; then
            echo "GITHUB_APP_PEM_FILE<<EOF" >> $GITHUB_ENV
            echo  "${{ secrets.fetcher-key }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "Missing Github App Key"
            exit 1
          fi
          if [[ ! -z "$JSON_SECRETS" ]]; then
            echo "SECRETS=true" >> $GITHUB_ENV;
          else
            echo "SECRETS=false" >> $GITHUB_ENV;
          fi

          if [[ "${{ vars }}" != '' && "${{ vars }}" != null ]]; then
            echo "VARS=true" >> $GITHUB_ENV;
          else
            echo "VARS=false" >> $GITHUB_ENV;
          fi

      - name: Get Terraform fetcher GitHub App token
        uses: tibdex/github-app-token@v1
        id: get_github_app_token
        with:
          app_id: ${{ env.GITHUB_APP_ID }}
          installation_id: ${{ env.GITHUB_APP_INSTALLATION_ID}}
          private_key: ${{ env.GITHUB_APP_PEM_FILE }}

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: export TFVARS in Github Secrets
        uses: oNaiPs/secrets-to-env-action@v1.2
        if: env.SECRETS == 'true'
        with:
          secrets: ${{ secrets.json-secrets }}
          include: TF_VAR_*

      - name: export TFVARS in Github Variables
        uses: oNaiPs/secrets-to-env-action@v1.2
        if: env.VARS == 'true'
        with:
          secrets: ${{ toJSON(vars) }}
          include: TF_VAR_*

      - name: convert TFVARS to lowercase
        run: |
          for var_name in $(env | grep -o '^TF_VAR_[^=]*'); do
            suffix="${var_name#TF_VAR_}"
            suffix_lowercase=$(echo "$suffix" | tr '[:upper:]' '[:lower:]')
            new_var_name="TF_VAR_${suffix_lowercase}"
            {
              echo "$new_var_name<<EOF"
              echo "${!var_name}"
              echo "EOF"
            } >> $GITHUB_ENV
            unset $var_name
          done

      - name: Checkout source code
        uses: actions/checkout@v4.1.1

      - id: auth
        if: ${{ steps.gcp-secret-check.outputs.secrets != 'true' }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.gcp-sa-key }}"
          service_account: ${{ env.GCP_SA }}
          workload_identity_provider: ${{ env.GCP_WIF }}

      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: "beta"
          project_id: "${{ env.GCP_PROJECT_ID }}"

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}

      - name: terraform plan
        working-directory: ${{ inputs.directory }}/
        id: tfplan
        if: ${{ contains(needs.get-env.outputs.action, 'plan')}}
        env:
          TF_VAR_sdv_gh_access_token: ${{ steps.get_github_app_token.outputs.token }}
          TF_VAR_sdv_gh_repo_name: ${{ github.event.repository.full_name }}
          TF_VAR_sdv_gh_env_name: ${{ needs.get-env.outputs.environment }}
        run: |
          git config --global url."https://x-access-token:${{steps.get_github_app_token.outputs.token}}@github.com".insteadOf https://github.com
          terraform init -input=false -backend-config bucket="${{ vars.GCP_BACKEND_BUCKET_NAME }}"
          terraform plan -parallelism=${{ inputs.parallelism }} -input=false -no-color -out=tfplan && terraform show -no-color tfplan
        continue-on-error: true

      - name: Reformat Plan
        if: ${{ needs.get-env.outputs.environment != '' }}
        env:
          TFPLAN_STDOUT: ${{ steps.tfplan.outputs.stdout }}
          TFPLAN_STDERR: ${{ steps.tfplan.outputs.stderr }}
        run: |
          if [[ "${{ steps.tfplan.outcome }}" == 'success' ]]; then
            printf '%s' "$TFPLAN_STDOUT" \
            | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt
          else
            printf '%s' "$TFPLAN_STDERR" \
            | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt
          fi

      - name: Put Plan in Env Var
        if: ${{ needs.get-env.outputs.environment != '' }}
        run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post Plan to GitHub PR
        uses: mshick/add-pr-comment@v2
        if: ${{ needs.get-env.outputs.environment != '' }}
        with:
          allow-repeats: false
          repo-token: ${{steps.get_github_app_token.outputs.token}}
          message-id: plan-${{ needs.get-env.outputs.environment }}
          message: |
            ## Terraform plan ${{ needs.get-env.outputs.environment }}
            ```diff
            ${{ env.PLAN }}
            ```
        continue-on-error: true

      - name: Check if Plan failed
        if: steps.tfplan.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('Terraform plan failed.')

      - name: terraform apply
        working-directory: ${{ inputs.directory }}/
        id: tfapply
        if: ${{ contains(needs.get-env.outputs.action, 'apply')}}
        env:
          TF_VAR_sdv_gh_access_token: ${{ steps.get_github_app_token.outputs.token }}
          TF_VAR_sdv_gh_repo_name: ${{ github.event.repository.full_name }}
          TF_VAR_sdv_gh_env_name: ${{ needs.get-env.outputs.environment }}
        run: |
          git config --global url."https://x-access-token:${{steps.get_github_app_token.outputs.token}}@github.com".insteadOf https://github.com
          terraform apply -parallelism=${{ inputs.parallelism }} -input=false -no-color tfplan
        continue-on-error: true

      - name: Post Apply Success
        if: steps.tfapply.outcome == 'success'
        uses: mshick/add-pr-comment@v2
        with:
          allow-repeats: false
          repo-token: ${{steps.get_github_app_token.outputs.token}}
          message-id: apply-${{ needs.get-env.outputs.environment }}
          message: |
            ## Terraform Apply ${{ needs.get-env.outputs.environment }} Succeeded
            ```
            ${{ steps.tfapply.outputs.stdout }}
            ```
        continue-on-error: true

      - name: Post Apply Failure
        if: steps.tfapply.outcome == 'failure'
        uses: mshick/add-pr-comment@v2
        with:
          allow-repeats: false
          repo-token: ${{steps.get_github_app_token.outputs.token}}
          message-id: apply-${{ needs.get-env.outputs.environment }}
          message: |
            ## Terraform Apply ${{ needs.get-env.outputs.environment }} Failed
            ```
            ${{ steps.tfapply.outputs.stderr }}
            ```
        continue-on-error: true

      - name: Fail if apply failed
        if: steps.tfapply.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('Terraform apply failed.')
